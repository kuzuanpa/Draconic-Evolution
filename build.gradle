
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "forge"
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        name = "gt"
        url = "https://gregtech.mechaenetia.com/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = "gtnh"
        url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        allowInsecureProtocol = true
    }
}

apply plugin: 'forge'

version = "${project.minecraft_version}-${project.mod_version}"
group = "com.brandon3055.draconicevolution"
archivesBaseName = "Draconic-Evolution"

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}



dependencies {
    implementation "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    implementation "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    implementation "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    implementation "li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev"
    implementation "dan200.computercraft:ComputerCraft:1.75"
    implementation "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"

}

processResources
{

    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
}

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}

task deobfJar(type: Jar) { // Generate deobfuscated
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourceJar(type: Jar) { // Generate sources
    from sourceSets.main.allSource
    classifier = 'sources'
}

tasks.build.dependsOn('sourceJar', 'deobfJar')

artifacts {
   archives deobfJar
   archives sourceJar
   archives jar
}